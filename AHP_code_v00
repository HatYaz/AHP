import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import numpy as np

class AHP_GUI:
    def __init__(self, root):
        self.root = root
        self.root.title("AHP Evaluation of Wave Energy Implementation")
        
        # Criteria and alternatives
        self.criteria = ["Costal zone", "Wave steepness", "Wind speed", "DEGIE", "Wave intensity", "Wave period", "Water density"]
        self.alternatives = ["Wave Energy Converter A",
                             "Wave Energy Converter B",
                             "Wave Energy Converter C",
                             "Wave Energy Converter D"]
        
        # Frame for criteria weights
        self.criteria_frame = ttk.LabelFrame(root, text="Criteria Weights")
        self.criteria_frame.pack(padx=10, pady=5, fill="both", expand=True)
        
        # Frame for alternative scores
        self.alternatives_frame = ttk.LabelFrame(root, text="Alternative Scores")
        self.alternatives_frame.pack(padx=10, pady=5, fill="both", expand=True)
        
        # Initialize variables for criteria weights
        self.criteria_weights = {}
        self.criteria_vars = []
        
        # Initialize variables for alternative scores
        self.alternative_scores = {}
        self.alternative_vars = []
        
        # Create input fields for criteria weights
        for i, crit in enumerate(self.criteria):
            var = tk.DoubleVar(value=1.0)
            self.criteria_vars.append(var)
            label = ttk.Label(self.criteria_frame, text=crit)
            label.grid(row=i, column=0, padx=5, pady=2, sticky="w")
            entry = ttk.Entry(self.criteria_frame, textvariable=var)
            entry.grid(row=i, column=1, padx=5, pady=2)
        
        # Create input fields for alternative scores
        for i, alt in enumerate(self.alternatives):
            var = tk.DoubleVar(value=1.0)
            self.alternative_vars.append(var)
            label = ttk.Label(self.alternatives_frame, text=alt)
            label.grid(row=i, column=0, padx=5, pady=2, sticky="w")
            entry = ttk.Entry(self.alternatives_frame, textvariable=var)
            entry.grid(row=i, column=1, padx=5, pady=2)
        
        # Button to calculate
        calculate_button = ttk.Button(root, text="Calculate", command=self.calculate)
        calculate_button.pack(pady=10)
        
    def pairwise_comparison(self, matrix):
        n = len(matrix)
        pairwise_comparisons = np.zeros((n, n))
        for i in range(n):
            for j in range(n):
                if i == j:
                    pairwise_comparisons[i][j] = 1
                elif i < j:
                    pairwise_comparisons[i][j] = matrix[i][j]
                else:
                    pairwise_comparisons[i][j] = 1 / pairwise_comparisons[j][i]
        return pairwise_comparisons
    
    def calculate_weights(self, pairwise_matrix):
        n = len(pairwise_matrix)
        eigenvalues, eigenvectors = np.linalg.eig(pairwise_matrix)
        max_eigenvalue_index = np.argmax(eigenvalues)
        principal_eigenvector = eigenvectors[:, max_eigenvalue_index].real
        weights = principal_eigenvector / sum(principal_eigenvector)
        return weights
    
    def normalize_scores(self, scores):
        total_score = sum(scores.values())
        normalized_scores = {alt: score / total_score for alt, score in scores.items()}
        return normalized_scores
    
    def calculate(self):
        # Get criteria weights from input fields
        for i, crit in enumerate(self.criteria):
            self.criteria_weights[crit] = self.criteria_vars[i].get()
        
        # Pairwise comparisons for criteria
        criteria_matrix = np.zeros((len(self.criteria), len(self.criteria)))
        for i in range(len(self.criteria)):
            for j in range(len(self.criteria)):
                criteria_matrix[i][j] = self.criteria_vars[i].get() / self.criteria_vars[j].get()
        
        criteria_pairwise = self.pairwise_comparison(criteria_matrix)
        
        # Calculate criteria weights
        criteria_weights = self.calculate_weights(criteria_pairwise)
        
        # Get alternative scores from input fields
        for i, alt in enumerate(self.alternatives):
            self.alternative_scores[alt] = self.alternative_vars[i].get()
        
        # Normalize scores
        normalized_scores = self.normalize_scores(self.alternative_scores)
        
        # Rank alternatives
        ranked_alternatives = sorted(normalized_scores.items(), key=lambda x: x[1], reverse=True)
        
        # Show results
        result_str = "Ranked alternatives:\n"
        for i, (alt, score) in enumerate(ranked_alternatives):
            result_str += f"{i+1}. {alt}: {score:.2f}\n"
        messagebox.showinfo("Results", result_str)

# Create main window
root = tk.Tk()
app = AHP_GUI(root)
root.mainloop()
