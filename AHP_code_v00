# Hatem Yazidi 2024 
import PySimpleGUI as sg
import numpy as np

class AHP_GUI:
    def __init__(self):
        self.criteria = ["Costal zone", "Wave steepness", "Wind speed", "DEGIE", "Wave intensity", "Wave period", "Water density"]
        self.alternatives = ["Wave Energy Converter A",
                             "Wave Energy Converter B",
                             "Wave Energy Converter C",
                             "Wave Energy Converter D"]

        self.layout = [
            [sg.Text("Criteria Weights")],
            *[[sg.Text(crit), sg.InputText(default_text="1.0", size=(10, 1), key=f"-CRITERIA_{i}-")] for i, crit in enumerate(self.criteria)],
            [sg.Text("Alternative Scores")],
            *[[sg.Text(alt), sg.InputText(default_text="1.0", size=(10, 1), key=f"-ALTERNATIVE_{i}-")] for i, alt in enumerate(self.alternatives)],
            [sg.Button("Calculate"), sg.Button("Exit")],
            [sg.Text("Copyright GazEol Renouvelable 2024", size=(30, 1), justification='right', text_color='gray')]
        ]

    def pairwise_comparison(self, matrix):
        n = len(matrix)
        pairwise_comparisons = np.zeros((n, n))
        for i in range(n):
            for j in range(n):
                if i == j:
                    pairwise_comparisons[i][j] = 1
                elif i < j:
                    pairwise_comparisons[i][j] = matrix[i][j]
                else:
                    pairwise_comparisons[i][j] = 1 / pairwise_comparisons[j][i]
        return pairwise_comparisons

    def calculate_weights(self, pairwise_matrix):
        n = len(pairwise_matrix)
        eigenvalues, eigenvectors = np.linalg.eig(pairwise_matrix)
        max_eigenvalue_index = np.argmax(eigenvalues)
        principal_eigenvector = eigenvectors[:, max_eigenvalue_index].real
        weights = principal_eigenvector / sum(principal_eigenvector)
        return weights

    def normalize_scores(self, scores):
        total_score = sum(scores.values())
        normalized_scores = {alt: score / total_score for alt, score in scores.items()}
        return normalized_scores

    def run(self):
        window = sg.Window("AHP Evaluation of Wave Energy Implementation", self.layout, size=(600, 450))  # Specify size

        while True:
            event, values = window.Read()

            if event == '__TIMEOUT__' or event == "Exit":
                break

            if event == "Calculate":
                criteria_weights = [float(values[f"-CRITERIA_{i}-"]) for i in range(len(self.criteria))]

                criteria_matrix = np.zeros((len(self.criteria), len(self.criteria)))
                for i in range(len(self.criteria)):
                    for j in range(len(self.criteria)):
                        criteria_matrix[i][j] = float(values[f"-CRITERIA_{i}-"]) / float(values[f"-CRITERIA_{j}-"])

                criteria_pairwise = self.pairwise_comparison(criteria_matrix)
                criteria_weights = self.calculate_weights(criteria_pairwise)

                alternative_scores = {self.alternatives[i]: float(values[f"-ALTERNATIVE_{i}-"]) for i in range(len(self.alternatives))}
                normalized_scores = self.normalize_scores(alternative_scores)

                ranked_alternatives = sorted(normalized_scores.items(), key=lambda x: x[1], reverse=True)

                result_str = "Ranked alternatives:\n"
                for i, (alt, score) in enumerate(ranked_alternatives):
                    result_str += f"{i+1}. {alt}: {score:.2f}\n"

                sg.Popup("Results", result_str)

        window.close()

# Create instance and run the application
app = AHP_GUI()
app.run()
